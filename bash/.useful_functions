# ~/.useful

## functions

does_command_exist ()
{
	hash "$1" > /dev/null 2>&1
}

press_to_confirm ()
{
	echo
	read -n 1 -s -r -p "$1"
	echo
}

return_proc_title ()
{
	ps -o comm $$ | tail -1
}

parse_git_branch ()
{
	#git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
	local branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
	# check if branch is an empty string
	if [ ! -z "$branch" ]; then
		printf "$branch"
	fi
}


# @brief create a local git repo and push the first commit to new remote
# @param $1 the remote url
# @param $2 the wanted path for the local repo
git_init_local_of_new_remote ()
{
	local usage="Usage: git_init_local_of_new_remote <remote_name> [local-dir-name]"
	if [ $# -eq 0 ]; then
		echo $usage
		return 1
	fi
	local remote_url=$1;
	# check if remote url doesn't end with .git
	if [[ $remote_url != *".git" ]]; then
		echo "remote url must end with .git"
		return 1
	fi
	local remote_name=$(basename $remote_url)
	[ $# -ge 2 ] && local local_dir=$2 || local local_dir=$remote_name

	if [ -d $local_dir ]; then
		echo "dircetory $local_dir already exists"
		echo $usage
		return 1
	fi
	echo "Initializing local repo of remote $remote_name"
	echo "repo will be created in $local_dir"
	press_to_confirm "Press [ANY KEY] to start"

	mkdir -p $local_dir
	cd $local_dir # cd to local repo
	echo "# $remote_name" > README.md
	git init
	git add README.md
	git commit -m "initial commit"
	git branch -M master
	git remote add origin $remote_url
	git push -u origin master
	cd $OLDPWD # go back to previous directory
}

# @brief copy a branch of a git repo as a zip archive
# @brief without the .git folder
# @param $1 remote name
# @param $2 branch name [default: master]
# @param $3 archive format [default: zip]
git_copy_branch ()
{
	if [ $# -ge 1 ]; then
		local url=$1;
		# remove .git suffix from url if present
		if [[ $url =~ .git$ ]]; then
			url=${url%.*}
		fi
	else
		echo "url is not specified and needed"
		return 1
	fi
	[ $# -ge 2 ] && local branch=$2 || local branch="master"
	[ $# -ge 3 ] && local format=$3 || local format="zip"
	local dest="$(basename $url).$branch.$format"
	local archive_url="$url/archive/$branch.$format"
	local run="wget -O $dest $archive_url"
	echo "copying $branch branch"
	echo "from $url"
	echo "in $format format"
	echo "to $dest"
	echo "by running: $run"
	press_to_confirm "Press [ANY KEY] to start"
	$run
}

# @brief extract archive
# @param $1 archive path
extract ()
{
	if [ -f "$1" ] ; then
		case $1 in
			*.tar.bz2)   tar xjf $1   ;;
			*.tar.gz)    tar xzf $1   ;;
			*.bz2)       bunzip2 $1   ;;
			*.rar)       unrar x $1   ;;
			*.gz)        gunzip $1    ;;
			*.tar)       tar xf $1    ;;
			*.tbz2)      tar xjf $1   ;;
			*.tgz)       tar xzf $1   ;;
			*.zip)       unzip $1     ;;
			*.Z)         uncompress $1;;
			*.7z)        7z x $1      ;;
			*.deb)       ar x $1      ;;
			*.tar.xz)    tar xf $1    ;;
			*.tar.zst)   unzstd $1    ;;
			*.war)       jar xvf $1   ;;
			*)           echo "'$1' cannot be extracted via extract()" ;;
		esac
	else
	echo "'$1' is not a valid file"
	echo "usage: extract <file>"
	fi
}
